name: Deploy Gatus to Google Cloud Run

on:
  # Trigger when child repos create new artifacts (via repository dispatch)
  repository_dispatch:
    types: [gatus-config-updated]

  # Also allow manual runs and schedule
  workflow_dispatch: # Allows manual runs
  schedule:
    - cron: "0 */6 * * *" # Every 6 hours to check for new artifacts

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: "read"
      id-token: "write" # Required for Workload Identity Federation (passwordless auth)

    steps:
      - name: Checkout Config Repo
        uses: actions/checkout@v4

      - name: Install yq (YAML Processor)
        run: sudo wget https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64 -O /usr/bin/yq && sudo chmod +x /usr/bin/yq

      # Show trigger context for debugging
      - name: Show trigger context
        run: |
          echo "Trigger event: ${{ github.event_name }}"
          if [ "${{ github.event_name }}" = "repository_dispatch" ]; then
            echo "Triggered by: ${{ github.event.client_payload.source_repo }}"
            echo "Run ID: ${{ github.event.client_payload.run_id }}"
            echo "Commit: ${{ github.event.client_payload.commit }}"
          fi

      # Get latest workflow runs for child repos (improved logic)
      - name: Get latest workflow runs for child repos
        id: get-runs
        run: |
          # Function to get latest successful run ID
          get_latest_run() {
            local repo=$1
            local run_id=$(curl -s -H "Authorization: token ${{ secrets.PAT_TOKEN }}" \
              "https://api.github.com/repos/$repo/actions/workflows/generate-gatus-artifact.yml/runs?status=success&per_page=1" \
              | jq -r '.workflow_runs[0].id // "null"')
            echo $run_id
          }

          # If triggered by repository_dispatch, use the specific run_id if available
          if [ "${{ github.event_name }}" = "repository_dispatch" ]; then
            TRIGGERED_REPO="${{ github.event.client_payload.source_repo }}"
            TRIGGERED_RUN_ID="${{ github.event.client_payload.run_id }}"
            echo "Processing notification from $TRIGGERED_REPO (run: $TRIGGERED_RUN_ID)"
          fi

          # Get run IDs for all repos (fallback to latest if not specified)
          K8S_SHARED_RUN=$(get_latest_run "justlac/k8s-shared")
          K8S_PROD_RUN=$(get_latest_run "justlac/k8s-cedille-production-v2")  
          K8S_MGMT_RUN=$(get_latest_run "justlac/k8s-management-v2")

          # Override with specific run ID if this was triggered by repository_dispatch
          if [ "${{ github.event_name }}" = "repository_dispatch" ]; then
            case "$TRIGGERED_REPO" in
              "justlac/k8s-shared")
                K8S_SHARED_RUN="${{ github.event.client_payload.run_id }}"
                ;;
              "justlac/k8s-cedille-production-v2")
                K8S_PROD_RUN="${{ github.event.client_payload.run_id }}"
                ;;
              "justlac/k8s-management-v2")  
                K8S_MGMT_RUN="${{ github.event.client_payload.run_id }}"
                ;;
            esac
          fi

          echo "k8s-shared-run=$K8S_SHARED_RUN" >> $GITHUB_OUTPUT
          echo "k8s-prod-run=$K8S_PROD_RUN" >> $GITHUB_OUTPUT
          echo "k8s-mgmt-run=$K8S_MGMT_RUN" >> $GITHUB_OUTPUT

          echo "Using run IDs:"
          echo "  k8s-shared: $K8S_SHARED_RUN"
          echo "  k8s-cedille-production-v2: $K8S_PROD_RUN"
          echo "  k8s-management-v2: $K8S_MGMT_RUN"

      # Download artifacts from child repositories (with better error handling)
      - name: Download k8s-shared artifact
        continue-on-error: true
        id: download-shared
        uses: actions/download-artifact@v4
        with:
          name: gatus-config-k8s-shared
          path: ./endpoints/k8s-shared/
          github-token: ${{ secrets.PAT_TOKEN }}
          repository: justlac/k8s-shared
          run-id: ${{ steps.get-runs.outputs.k8s-shared-run }}

      - name: Download k8s-cedille-production-v2 artifact
        continue-on-error: true
        id: download-prod
        uses: actions/download-artifact@v4
        with:
          name: gatus-config-k8s-cedille-production-v2
          path: ./endpoints/k8s-cedille-production-v2/
          github-token: ${{ secrets.PAT_TOKEN }}
          repository: justlac/k8s-cedille-production-v2
          run-id: ${{ steps.get-runs.outputs.k8s-prod-run }}

      - name: Download k8s-management-v2 artifact
        continue-on-error: true
        id: download-mgmt
        uses: actions/download-artifact@v4
        with:
          name: gatus-config-k8s-management-v2
          path: ./endpoints/k8s-management-v2/
          github-token: ${{ secrets.PAT_TOKEN }}
          repository: justlac/k8s-management-v2
          run-id: ${{ steps.get-runs.outputs.k8s-mgmt-run }}

      # Report download status
      - name: Report download status
        run: |
          echo "Download Results:"
          echo "  k8s-shared: ${{ steps.download-shared.outcome }}"
          echo "  k8s-cedille-production-v2: ${{ steps.download-prod.outcome }}"
          echo "  k8s-management-v2: ${{ steps.download-mgmt.outcome }}"

      # List downloaded artifacts for debugging
      - name: List downloaded artifacts
        run: |
          echo "--- Downloaded Endpoint Files ---"
          find ./endpoints/ -name "gatus-endpoints.yml" -type f || echo "No gatus-endpoints.yml files found"
          echo ""

          if [ "$(find ./endpoints/ -name "gatus-endpoints.yml" -type f)" ]; then
            echo "--- File contents ---"
            for file in $(find ./endpoints/ -name "gatus-endpoints.yml" -type f); do
              echo "=== $file ==="
              echo "Size: $(wc -l < "$file") lines"
              head -20 "$file"  # Show first 20 lines
              if [ $(wc -l < "$file") -gt 20 ]; then
                echo "... (truncated, total $(wc -l < "$file") lines)"
              fi
              echo ""
            done
          else
            echo "No endpoint files to display"
          fi

      # Create combined gatus-endpoints.yml file from downloaded artifacts
      - name: Create Combined Endpoints File
        run: |
          echo "📋 Creating combined gatus-endpoints.yml file..."

          # Initialize empty endpoints array
          echo "endpoints: []" > ./endpoints/combined-gatus-endpoints.yml

          # Find all gatus-endpoints.yml files from downloaded artifacts (in subdirectories)
          artifact_files=$(find ./endpoints/ -mindepth 2 -name "gatus-endpoints.yml" -type f)

          if [ -n "$artifact_files" ]; then
            echo "📊 Found artifact files to combine:"
            for file in $artifact_files; do
              echo "  - $file"
              # Show endpoint count in each file
              count=$(yq eval '.endpoints | length' "$file" 2>/dev/null || echo "0")
              echo "    └─ $count endpoints"
            done
            
            echo ""
            echo "🔗 Combining all endpoint files..."
            
            # Combine all endpoint files into one
            for file in $artifact_files; do
              if [ -f "$file" ]; then
                echo "  � Processing: $file"
                # Use more robust merging - ensure we get all endpoints
                yq eval-all '{"endpoints": (.[0].endpoints // []) + (.[1].endpoints // [])}' ./endpoints/combined-gatus-endpoints.yml "$file" > temp-combined.yml
                mv temp-combined.yml ./endpoints/combined-gatus-endpoints.yml
                
                # Verify merge worked
                new_count=$(yq eval '.endpoints | length' ./endpoints/combined-gatus-endpoints.yml)
                echo "  ✅ Combined file now has: $new_count endpoints"
              fi
            done
          else
            echo "⚠️ No artifact files found, checking for existing gatus-endpoints.yml..."
            if [ -f "./endpoints/gatus-endpoints.yml" ]; then
              echo "📁 Using existing ./endpoints/gatus-endpoints.yml"
              existing_count=$(yq eval '.endpoints | length' ./endpoints/gatus-endpoints.yml)
              echo "  └─ $existing_count endpoints found"
              cp ./endpoints/gatus-endpoints.yml ./endpoints/combined-gatus-endpoints.yml
            else
              echo "🧪 Creating test endpoint for demonstration"
              echo 'endpoints:' > ./endpoints/combined-gatus-endpoints.yml
              echo '  - name: test-endpoint' >> ./endpoints/combined-gatus-endpoints.yml
              echo '    url: "https://httpbin.org/status/200"' >> ./endpoints/combined-gatus-endpoints.yml
              echo '    interval: 30s' >> ./endpoints/combined-gatus-endpoints.yml
              echo '    conditions:' >> ./endpoints/combined-gatus-endpoints.yml
              echo '      - "[STATUS] == 200"' >> ./endpoints/combined-gatus-endpoints.yml
            fi
          fi

          # Replace the main endpoints file
          mv ./endpoints/combined-gatus-endpoints.yml ./endpoints/gatus-endpoints.yml

          echo ""
          echo "✅ Combined gatus-endpoints.yml created!"
          endpoint_count=$(yq eval '.endpoints | length' ./endpoints/gatus-endpoints.yml)
          echo "📊 Final total endpoints: $endpoint_count"

          echo ""
          echo "--- All endpoint names in combined file ---"
          yq eval '.endpoints[].name' ./endpoints/gatus-endpoints.yml

          echo ""
          echo "--- Combined gatus-endpoints.yml (first 40 lines) ---"
          head -40 ./endpoints/gatus-endpoints.yml

      # Aggregate all endpoint snippets into a single config.yaml (improved)
      - name: Aggregate Config Snippets
        run: |
          echo "🔧 Creating final Gatus configuration..."

          # Use the combined gatus-endpoints.yml file created in the previous step
          if [ -f "./endpoints/gatus-endpoints.yml" ]; then
            endpoint_count=$(yq eval '.endpoints | length' ./endpoints/gatus-endpoints.yml)
            echo "📊 Using combined endpoints file with $endpoint_count endpoints"
            
            # Create the final config by combining base config with endpoints
            if [ -f "gatus-base-config.yml" ]; then
              echo "🔧 Merging gatus-base-config.yml with endpoints"
              yq eval-all 'select(fileIndex == 0) *+ select(fileIndex == 1)' gatus-base-config.yml ./endpoints/gatus-endpoints.yml > config.yaml
            else
              echo "🔧 No base config found, using endpoints only"
              cp ./endpoints/gatus-endpoints.yml config.yaml
            fi
          else
            echo "❌ ERROR: No combined gatus-endpoints.yml file found!"
            exit 1
          fi

          echo ""
          echo "--- Generated Gatus Config (first 50 lines) ---"
          head -50 config.yaml

          echo ""
          echo "--- Config validation ---"
          final_count=$(yq eval '.endpoints | length' config.yaml)
          echo "✅ $final_count endpoints in final config"

          if [ "$final_count" -eq 0 ]; then
            echo "❌ ERROR: No endpoints found in final config!"
            exit 1
          fi

          # Show all endpoint names for verification
          echo ""
          echo "--- All Endpoint Names ---"
          yq eval '.endpoints[].name' config.yaml

          echo ""
          echo "--- Generated Gatus Config (first 50 lines) ---"
          head -50 config.yaml

          echo ""
          echo "--- Config validation ---"
          final_count=$(yq eval '.endpoints | length' config.yaml)
          echo "✅ $final_count endpoints in final config"

          if [ "$final_count" -eq 0 ]; then
            echo "❌ ERROR: No endpoints found in final config!"
            exit 1
          fi

      # Test Docker build locally (before GCP auth)
      - name: Test Docker Build
        run: |
          echo "🧪 Testing Docker build locally..."
          echo "📁 Current directory contents:"
          ls -la
          echo ""
          echo "📄 Dockerfile contents:"
          cat Dockerfile
          echo ""
          echo "⚙️ config.yaml contents (first 20 lines):"
          head -20 config.yaml
          echo ""
          echo "🐳 Building Docker image locally..."
          docker build -t gatus-test:local .
          echo "✅ Docker build successful!"

      # Authenticate to Google Cloud without a password
      - id: "auth"
        uses: "google-github-actions/auth@v1"
        with:
          workload_identity_provider: ${{ secrets.GCP_WIF_PROVIDER }}
          service_account: ${{ secrets.GCP_SERVICE_ACCOUNT }}

      # Build and Push Docker Image to Google Artifact Registry
      - name: Build and Push Docker Image
        run: |
          echo "🐳 Building Docker image for GCP..."
          gcloud auth configure-docker us-central1-docker.pkg.dev

          # Build with better caching
          docker build \
            --tag us-central1-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/gatus-cedille/gatus-app:${{ github.sha }} \
            --tag us-central1-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/gatus-cedille/gatus-app:latest \
            .

          echo "📤 Pushing Docker image..."
          docker push us-central1-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/gatus-cedille/gatus-app:${{ github.sha }}
          docker push us-central1-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/gatus-cedille/gatus-app:latest

      # Deploy the new image to Google Cloud Run
      - name: Deploy to Cloud Run
        run: |
          echo "🚀 Deploying to Cloud Run..."
          gcloud run deploy gatus-dashboard-cedille \
            --image=us-central1-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/gatus-cedille/gatus-app:${{ github.sha }} \
            --region=northamerica-northeast1 \
            --platform=managed \
            --allow-unauthenticated \
            --max-instances=1 \
            --volume name=gatus-db,type=cloud-storage,bucket=${{ secrets.GCP_BUCKET_NAME }} \
            --volume-mount name=gatus-db,mount-path=/data
            
          echo "✅ Deployment completed!"

      # Post deployment summary
      - name: Deployment Summary
        run: |
          echo "📋 === DEPLOYMENT SUMMARY ==="
          echo "🔥 Trigger: ${{ github.event_name }}"
          if [ "${{ github.event_name }}" = "repository_dispatch" ]; then
            echo "📡 Triggered by: ${{ github.event.client_payload.source_repo }}"
          fi
          echo "📊 Endpoints deployed: $(yq eval '.endpoints | length' config.yaml)"
          echo "🐳 Image: us-central1-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/gatus-cedille/gatus-app:${{ github.sha }}"
          echo "🌍 Service: gatus-dashboard-cedille (northamerica-northeast1)"
          echo "✅ Status: SUCCESS"
